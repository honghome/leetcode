// Source : https://leetcode.com/problems/ugly-number-ii/
// Author : Peiyang Hong
// Date   : 2015-09-19
// stars  : 4
/********************************************************************************** 

Write a program to find the n-th ugly number.

Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. For example, 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.

Note that 1 is typically treated as an ugly number.


The key is to realize each number can be and have to be generated by a former number multiplied by 2, 3 or 5 e.g. 1 2 3 4 5 6 8 9 10 12 15.. what is next? it must be x * 2 or y * 3 or z * 5, where x, y, z is an existing number.

How do we determine x, y, z then? apparently, you can just traverse the sequence generated by far from 1 ... 15, until you find such x, y, z that x2, y3, z5 is just bigger than 15. In this case x=8, y=6, z=4. Then you compare x2, y3, z5 so you know next number will be x2 = 82 = 16. k, now you have 1,2,3,4,....,15, 16,

Then what is next? You wanna do the same process again to find the new x, y, z, but you realize, wait, do I have to traverse traverse the sequence generated by far again?

NO! since you know last time, x=8, y=6, z=4 and x=8 was used to generate 16, so this time, you can immediately know the newx = 9 (the next number after 8 is 9 in the generated sequence), y=6, z=4. Then you need to compare newx * 2, y3, z5. You know next number is 9*2 = 18;

And you also know, the next x will be 10 since new_x = 9 was used this time. But what is next y? apparently, if y=6, 6*3 = 18, which is already generated in this round. So you also need to update next y from 6 to 8.

Based on the idea above, you can actually generated x,y,z from very beginning, and update x, y, z accordingly. It ends up a O(n) solution.

**********************************************************************************/

#include <iostream>
#include <vector>
#include <cstdio>
#include <algorithm>
#include <map>
using namespace std;

int nthUglyNumber1(int n) {
	int val[n];
	int id1, id2, id3;
	id1 = id2 = id3 = 0;
	val[0] = 1;
	for (int i = 1; i < n; i++) {
		int top = val[i-1];
		while (val[id1]*2 <= top) {
			id1++;
		}
		while (val[id2]*3 <= top) {
			id2++;
		}
		while (val[id3]*5 <= top) {
			id3++;
		}
		int next = min(val[id1]*2, min(val[id2]*3, val[id3]*5));
		//cout<<"next: "<<next<<endl;
		if (next == val[id1]*2) {
			id1++;
		}
		if (next == val[id2]*3) {
			id2++;
		}
		if (next == val[id3]*5) {
			id3++;
		}
		val[i] = next;
	}
	return val[n-1];
}
int nthUglyNumber2(int n) {
	vector<int> v(1,1);
	int id1, id2, id3;
	id1 = id2 = id3 = 0;
	while (v.size() < n) {
		v.push_back(min(v[id1]*2, min(v[id2]*3, v[id3]*5)));
		if (v.back() == v[id1]*2) id1++;
		if (v.back() == v[id2]*3) id2++;
		if (v.back() == v[id3]*5) id3++;
	}
	return v.back();
}

int main() {
	int n;
	while (cin>>n) {
		cout<<nthUglyNumber2(n)<<endl;
	}
}